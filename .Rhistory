h5ls(fid)
H5Lcreate_external(fid, "a", gid, "e")
genes[1:3]
alt_genes <- list(unique(mcols(gff)[SecondID][,1]))
names(alt_genes) <- genes
gff
alt_genes[1:4]
alt_genes <- as.list(unique(mcols(gff)[SecondID][,1]))
alt_genes[1:4]
names(alt_genes) <- genes
alt_genes[1:4]
alt_genes[947:950]
alt_genes[["YDR110W"]]
rm(list=ls(all=T))
# Read in dependent packages
library(Rsamtools, quietly=T)
library(rtracklayer, quietly=T)
library(rhdf5, quietly=T)
library(parallel, quietly=T)
# Initialize default parameters
Ncores <- 1 # Number of cores for parallelization
MinReadLen <- 10 # Minimum read length in H5 output
MaxReadLen <- 50 # Maximum read length in H5 output
Buffer <- 250 # Length of flanking region around the CDS
PrimaryID <- "gene_id" # Primary gene IDs to access the data (YAL001C, YAL003W, etc.)
SecondID <- NULL # Secondary gene IDs to access the data (COX1, EFB1, etc.)
bamFile <- "input.bam" # Location of BAM file
hdfile <- "output.h5" # Location of H5 output file
gffFile <- NULL # Location of GFF2/GFF3 annotation file
dataset <- "data" # Name of the dataset
StopInCDS <- FALSE # Are stop codons part of the CDS annotations in GFF?
test <- FALSE # Is this a test run
SecondID="gene_name"
bamFile="/data/riboseq/2016/Weinberg/RPF/output.bam"
hdfile="here.h5"
gffFile="/data/riboseq/Supp/indices/Scer_sort.gtf"
test= TRUE
read_range <- MinReadLen:MaxReadLen
# Read in mapping function
source("./reads_to_list2.R")
# Read in the positions of all exons/genes in GFF format and subset CDS locations
gff <- readGFFAsGRanges(gffFile)
gff <- gff[gff$type=="CDS"]
# Read in the list of genes
genes <- unique(mcols(gff)[PrimaryID][,1])
if(!is.null(SecondID)){
alt_genes <- as.list(unique(mcols(gff)[SecondID][,1]))
names(alt_genes) <- genes
}
gff_pid <- mcols(gff)[PrimaryID][,1]
print("Mapping reads to CDS")
if(test){
genes <- genes[1:50]
}
source("../reads_to_list2.R")
source("../tmp_scripts/reads_to_list2.R")
outputList <- mclapply(genes,
function(x){
gene_location <- gff[gff_pid==x]
reads_to_list(gene_location=gene_location,
bamFile=bamFile,
read_range=read_range,
flank=Buffer,
mult_exon=TRUE);
},
mc.cores=Ncores)
names(outputList) <- genes
h5createFile(hdfile) # Create the output h5 file
fid <- H5Fopen(hdfile) # Filehandle for the h5 file
# Start codon position
start_cod <- (Buffer+1):(Buffer+3)
# Stop codon offset
if(StopInCDS){
offset <- 2
}else{
offset <- -1
}
# To create symbolic links for alternate gene ids
if(!is.null(SecondID)){
base_gid <- H5Gopen(fid,"/")
}
fid
base_gid
gene <- genes[1]
output <- outputList[[gene]]
dim(output)
gene
gff
646-334
+500
# Create H5 groups for each gene
h5createGroup(fid,gene)
h5createGroup(fid,paste(gene,dataset,sep="/"))
h5createGroup(fid,paste(gene,dataset,"reads",sep="/"))
mapped_reads <- paste(gene,dataset,"reads",sep="/")
h5ls(fid)
alt_genes[[gene]]
alt_genes[20:21]
gene <- genes[20]
output <- outputList[[gene]]
# Create H5 groups for each gene
h5createGroup(fid,gene)
h5createGroup(fid,paste(gene,dataset,sep="/"))
h5createGroup(fid,paste(gene,dataset,"reads",sep="/"))
mapped_reads <- paste(gene,dataset,"reads",sep="/")
# Symbolic link with alternate ids
if(!is.null(SecondID) & alt_genes[[gene]]!=gene){
H5Lcreate_external(hdfile, gene, base_gid, alt_genes[[gene]])
}
h5ls(fid)
gff
library(Biostrings)
yeast_seq <- readDNAStringSet("/data/riboseq/Supp/seqs/yeast/orf_genomic_1000.fasta")
yeast_seq
yeast_seq <- readDNAStringSet("/data/riboseq/Supp/seqs/yeast/yeast.fasta")
yeast_seq
which(table(gff$gene_id)>1)[1]
gff[gff$gene_id=="Q0045"]
a <- gff[gff$gene_id=="Q0045"]
coverage(a)
b <- coverage(a)
yeast_seq[b]
b$Mito
yeast_seq[["Mito"]][b$Mito]
yeast_seq[a]
c(yeast_seq[a])
c(unlist(yeast_seq[a]))
unlist(yeast_seq[a])
tmp_seq <- yeast_seq[gff]
tnp_seq
tmp_seq
names(tmp_seq) <- yeast_seq$gene_id
names(tmp_seq) <- gff$gene_id
names(tmp_seq) <- gff$gene_id
tmp_seq
gff[24]
gff[24:30]
gff[244:304]
which(strand(gff)=="-")[1:2]
gff[63:65]
tmp_seq[63:65]
?flank
a
promoters(a,upstream = 250,downstream = 250)
width(a[1])
width(promoters(a[1],upstream = 250,downstream = 250))
width(flank(a[1],width = 250,both=T))
flank(a[1],width = 250,both=T)
a[1]
resize(a[1],width=10)
resize_gff_flank <- function(gene_location,flank){
if(length(gene_location)==1){
start(gene_location) <- start(gene_location)-flank
end(gene_location) <- end(gene_location)+flank
}else{
start(gene_location)[start(gene_location)==min(start(gene_location))] <- start(gene_location)[start(gene_location)==min(start(gene_location))]-flank
end(gene_location)[end(gene_location)==max(end(gene_location))] <- end(gene_location)[end(gene_location)==max(end(gene_location))]+flank
}
return(gene_location)
}
tmp_gff <- sapply(unique(gff$gene_id),function(x){gene_location <- gff[gff$gene_id==x]; resize_gff_flank(gene_location = gene_location, flank=250)})
tmp_gff[[1]]
width(gff[1])
width(tmp_gff[1])
width(tmp_gff[[1]])
q <- unlist(tmp_gff)
q
q <- GRangesList(tmp_gff)
q
unlist(q[1:3])
q <- unlist(q)
q
b <- unlist(unlist(tmp_gff))
b
q
new_gff <- q
new_gff
gff[gff$gene_name=="COX1"]
new_gff[new_gff$gene_name=="COX1"]
tmp_seq <- sapply(unique(new_gff$gene_id), function(x){a <- yeast_seq[new_gff[new_gff$gene_id==x]]; if(strand(new_gff[new_gff$gene_id==x])[1]=="-"){a <- reverseComplement(a)}})
x <- "YAL001C"
strand(new_gff[new_gff$gene_id == x])[1]
strand(new_gff[new_gff$gene_id == x])[1]=="-"
as.character(strand(new_gff[new_gff$gene_id == x]))[1]=="-"
tmp_seq <- sapply(unique(new_gff$gene_id), function(x){a <- yeast_seq[new_gff[new_gff$gene_id==x]]; if(as.character(strand(new_gff[new_gff$gene_id == x]))[1]=="-"){a <- reverseComplement(a)}})
yeast_seq[new_gff[new_gff$gene_name=="COX1"]]
c(yeast_seq[new_gff[new_gff$gene_name=="COX1"]])
unlist(yeast_seq[new_gff[new_gff$gene_name=="COX1"]])
tmp_seq <- sapply(unique(new_gff$gene_id), function(x){a <- unlist(yeast_seq[new_gff[new_gff$gene_id==x]]); if(as.character(strand(new_gff[new_gff$gene_id == x]))[1]=="-"){a <- reverseComplement(a)}})
tmp_seq[1]
length(tmp_seq)
length(unique(new_gff$gene_id))
x <- "COX!"
x <- "COX1"
a <- unlist(yeast_seq[new_gff[new_gff$gene_id==x]])
a
x <- "Q0045"
a <- unlist(yeast_seq[new_gff[new_gff$gene_id==x]])
a
if(as.character(strand(new_gff[new_gff$gene_id == x]))[1]=="-"){a <- reverseComplement(a)}
a
as.character(strand(new_gff[new_gff$gene_id == x]))
sum(width(new_gff[new_gff$gene_name=="COX1"]))
sum(width(gff[gff$gene_name=="COX1"]))
a[251:253]
2102-247
a[1853:1855]
w <- c(tmp_seq)
w
tmp_seq
x
get_subseq <- function(x){
a <- unlist(yeast_seq[new_gff[new_gff$gene_id==x]]);
if(as.character(strand(new_gff[new_gff$gene_id == x]))[1]=="-"){
a <- reverseComplement(a)
}
return(a)
}
get_subseq(x)
rm(tmp_seq)
library(parallels)
library(parallel)
tmp_seq <- mclapply(unique(new_gff$gene_id), get_subseq,mc.cores = 50)
tmp_seq
unique(new_gff$gene_id)[781]
new_gff[unique(new_gff$gene_id)[781]]
tmp <- list()
cc <- 1
for(i in unique(new_gff$gene_id)){
tmp[[cc]] <- get_subseq(i)
cc <- cc+!
}
tmp <- list()
cc <- 1
for(i in unique(new_gff$gene_id)){
tmp[[cc]] <- get_subseq(i)
cc <- cc+1
}
i
cc
new_gff[i]
yeast_seq
xscat(yeast_seq,DNAString(rep(N,100)))
xscat(yeast_seq,DNAString(rep("N",100)))
DNAString(rep("N",100))
DNAString(paste0(rep("N",100)))
DNA_ALPHABET
DNAString("ACGT")
DNAString(paste0(rep("-",100)))
paste0(rep("-",100))
DNAString(paste(rep("-",100),collapse=""))
xscat(yeast_seq,DNAString(paste(rep("-",100),collapse="")))
nyeast_seq <- xscat(yeast_seq,DNAString(paste(rep("-",250),collapse="")))
any(start(new_gff)<0)
which(start(new_gff)<0)
new_gff[2049]
which(start(new_gff)<1)
start(new_gff)[start(new_gff)<1] <- 1
new_gff[2049]
get_subseq <- function(x){
a <- unlist(nyeast_seq[new_gff[new_gff$gene_id==x]]);
if(as.character(strand(new_gff[new_gff$gene_id == x]))[1]=="-"){
a <- reverseComplement(a)
}
return(a)
}
start(new_gff)[start(new_gff)<1] <- 1
tmp_seq <- mclapply(unique(new_gff$gene_id), get_subseq,mc.cores = 50)
nyeast_seq
names(nyeast_seq)
names(nyeast_seq) <- names(yeast_seq)
tmp_seq <- mclapply(unique(new_gff$gene_id), get_subseq,mc.cores = 50)
a <- DNAStringSet(tmp_seq)
a
a[1]
a[1][251:253]
a[[1]][251:253]
names(new_seq) <- unique(new_gff$gene_id
)
new_seq <- DNAStringSet(tmp_seq)
names(new_seq) <- unique(new_gff$gene_id)
new_seq
as.character(new_seq[1])
strsplit(as.character(new_seq[1]),"")
strsplit(as.character(new_seq[1:2]),"")
char_seq <- strsplit(as.character(new_seq),"")
names(char_seq) <- unique(new_gff$gene_id)
nt_seq <- strsplit(as.character(new_seq),"")
names(nt_seq) <- unique(new_gff$gene_id)
nt_seq[1:3]
nt_seq["YAL067W-A"]
get_subseq <- function(x,gseq,gff){
a <- unlist(gseq[gff[gff$gene_id==x]]);
if(as.character(strand(gff[gff$gene_id == x]))[1]=="-"){
a <- reverseComplement(a)
}
return(a)
}
cds_seq <- mclapply(unique(gff$gene_id), get_subseq,gseq=yeast_seq, gff=gff, mc.cores = 50)
tmp_cds <- cds_seq
cds_seq <- DNAStringSet(tmp_cds)
names(cds_seq) <- unique(gff$gene_id)
cds_seq
strsplit(as.character(cds_seq[1]),"...")
strsplit(as.character(cds_seq[1]),".")
strsplit(as.character(cds_seq[1]),"")
a <- as.character(cds_seq)
a[1]
a <- codons(cds_seq)
a <- codons(cds_seq[1])
a <- codons(cds_seq[[1]])
a
names(a)
viiews(a)
views(a)
Views(a)
View(a)
b <- View(a)
b
IRanges(a)
ranges(a)
a[,1]
as.data.frame(a)
a <- codons(cds_seq[1:2])
a <- sapply(cds_seq,codons)
a
b <- as.data.frame(a)
b <- as.list(a)
b[[1]]
as.data.frame(a[1])
b <- sapply(a,as.data.frame)
b[[1]]
b[1:2]
cod_seq <- b
names(cod_seq) <- unique(gff$gene_id)
cod_seq[1:2]
save(nt_seq,cod_seq,file="~/Projects/Riboviz/tmp_scripts/yeast_seq.RData")
library(feather)
write_feather(nt_seq,"~/Projects/Riboviz/tmp_scripts/yeast_seq_nt.feather")
h5createDataset()
?h5createDataset
# Save seq data as H5 file
hdfile <- "~/Projects/tmp_scripts/yeast_seq.h5"
h5createFile(hdfile) # Create the output h5 file
fid <- H5Fopen(hdfile) # Filehandle for the h5 file
genes <- unique(gff$gene_id)
hdfile <- "~/Projects/Riboviz/tmp_scripts/yeast_seq.h5"
h5createFile(hdfile) # Create the output h5 file
fid <- H5Fopen(hdfile) # Filehandle for the h5 file
gene <- genes[1]
tmp_nt <- nt_seq[[gene]]
tmp_cod <- cod_seq[[gene]]
# Create H5 groups for each gene
h5createGroup(fid,gene)
nt_dname <- paste(gene,"nt",sep="/")
cod_dname <- paste(gene,"codon",sep="/")
h5createDataset(fid,nt_dname,dims=c(1,length(tmp_nt)), storage.mode="character",size=1,level=7)
h5createDataset(fid,cod_dname,dims=c(1,length(tmp_cod)), storage.mode="character",size=3,level=7)
h5write(tmp_nt,fid,name=nt_dname,start=c(1,1))
tmp_nt
dim(tmp_nt)
as.matrix(tmp_nt)
as.matrix(t(tmp_nt))
h5write(as.matrix(t(tmp_nt)),fid,name=nt_dname,start=c(1,1))
h5write(as.matrix(t(tmp_cod)),fid,name=cod_dname,start=c(1,1))
for(gene in genes[2:length(genes)]){
# Get the output matrix of read counts by position and length for a gene
tmp_nt <- nt_seq[[gene]]
tmp_cod <- cod_seq[[gene]]
# Create H5 groups for each gene
h5createGroup(fid,gene)
# Specify a dataset within the gene group to store the values and degree of compression
nt_dname <- paste(gene,"nt",sep="/")
cod_dname <- paste(gene,"codon",sep="/")
h5createDataset(fid,nt_dname,dims=c(1,length(tmp_nt)), storage.mode="character",size=1,level=7)
h5createDataset(fid,cod_dname,dims=c(1,length(tmp_cod)), storage.mode="character",size=3,level=7)
# Write the dataset within the gene group
h5write(as.matrix(t(tmp_nt)),fid,name=nt_dname,start=c(1,1))
h5write(as.matrix(t(tmp_cod)),fid,name=cod_dname,start=c(1,1))
}
H5close()
hdfile <- "~/Projects/Riboviz/tmp_scripts/yeast_seq2.h5"
h5createFile(hdfile) # Create the output h5 file
fid <- H5Fopen(hdfile) # Filehandle for the h5 file
genes <- unique(gff$gene_id)
for(gene in genes[1:length(genes)]){
# Get the output matrix of read counts by position and length for a gene
tmp_nt <- nt_seq[[gene]]
tmp_cod <- cod_seq[[gene]]
# Create H5 groups for each gene
h5createGroup(fid,gene)
# Specify a dataset within the gene group to store the values and degree of compression
nt_dname <- paste(gene,"nt",sep="/")
cod_dname <- paste(gene,"codon",sep="/")
h5createDataset(fid,nt_dname,dims=c(length(tmp_nt),1), storage.mode="character",size=1,level=7)
h5createDataset(fid,cod_dname,dims=c(length(tmp_cod),1), storage.mode="character",size=3,level=7)
# Write the dataset within the gene group
h5write(as.matrix(tmp_nt),fid,name=nt_dname,start=c(1,1))
h5write(as.matrix(tmp_cod),fid,name=cod_dname,start=c(1,1))
}
H5close()
hdfile <- "~/Projects/Riboviz/tmp_scripts/yeast_seq.h5"
fid <- H5Fopen(hdfile) # Filehandle for the h5 file
a <- h5ls(fid)
head(a)
h5read(fid,"YAL001C/nt")
h5read(fid,"YAL003W/cod")
h5read(fid,"YAL003W/codon")
cod_seq[[1]]
cod_seq[["YAL003W"]]
nt_seq[["YAL003W"]]
tmp_cod
as.matrix(t(tmp_cod))
H5close()
hdfile <- "~/Projects/Riboviz/tmp_scripts/yeast_seq2.h5"
h5createFile(hdfile) # Create the output h5 file
fid <- H5Fopen(hdfile) # Filehandle for the h5 file
genes <- unique(gff$gene_id)
for(gene in genes[2:length(genes)]){
# Get the output matrix of read counts by position and length for a gene
tmp_nt <- nt_seq[[gene]]
tmp_cod <- cod_seq[[gene]]
# Create H5 groups for each gene
h5createGroup(fid,gene)
# Specify a dataset within the gene group to store the values and degree of compression
nt_dname <- paste(gene,"nt",sep="/")
cod_dname <- paste(gene,"codon",sep="/")
h5createDataset(fid,nt_dname,dims=c(1,length(tmp_nt)), storage.mode="character",size=1,level=7)
h5createDataset(fid,cod_dname,dims=c(1,length(tmp_cod)), storage.mode="character",size=4,level=7)
# Write the dataset within the gene group
h5write(as.matrix(t(tmp_nt)),fid,name=nt_dname,start=c(1,1))
h5write(as.matrix(t(tmp_cod)),fid,name=cod_dname,start=c(1,1))
}
H5close()
hdfile <- "~/Projects/Riboviz/tmp_scripts/yeast_seq2.h5"
h5createFile(hdfile) # Create the output h5 file
fid <- H5Fopen(hdfile) # Filehandle for the h5 file
genes <- unique(gff$gene_id)
gene <- genes[1]
tmp_nt <- nt_seq[[gene]]
tmp_cod <- cod_seq[[gene]]
# Create H5 groups for each gene
h5createGroup(fid,gene)
# Specify a dataset within the gene group to store the values and degree of compression
nt_dname <- paste(gene,"nt",sep="/")
cod_dname <- paste(gene,"codon",sep="/")
h5createDataset(fid,nt_dname,dims=c(1,length(tmp_nt)), storage.mode="character",size=1,level=7)
h5createDataset(fid,cod_dname,dims=c(1,length(tmp_cod)), storage.mode="character",size=4,level=7)
# Write the dataset within the gene group
h5write(as.matrix(t(tmp_nt)),fid,name=nt_dname,start=c(1,1))
h5write(as.matrix(t(tmp_cod)),fid,name=cod_dname,start=c(1,1))
tmp_cod
h5read(fid,paste0(gene,"/codon"))
for(gene in genes[2:length(genes)]){
# Get the output matrix of read counts by position and length for a gene
tmp_nt <- nt_seq[[gene]]
tmp_cod <- cod_seq[[gene]]
# Create H5 groups for each gene
h5createGroup(fid,gene)
# Specify a dataset within the gene group to store the values and degree of compression
nt_dname <- paste(gene,"nt",sep="/")
cod_dname <- paste(gene,"codon",sep="/")
h5createDataset(fid,nt_dname,dims=c(1,length(tmp_nt)), storage.mode="character",size=1,level=7)
h5createDataset(fid,cod_dname,dims=c(1,length(tmp_cod)), storage.mode="character",size=4,level=7)
# Write the dataset within the gene group
h5write(as.matrix(t(tmp_nt)),fid,name=nt_dname,start=c(1,1))
h5write(as.matrix(t(tmp_cod)),fid,name=cod_dname,start=c(1,1))
}
H5close()
hdfile <- "~/Projects/Riboviz/tmp_scripts/yeast_seq.h5"
fid <- H5Fopen(hdfile) # Filehandle for the h5 file
h5read(fid,paste0(gene,"/codon"))
h5read(fid,paste0(gene,"/nt"))
H5close()
hdfile <- "~/Projects/Riboviz/tmp_scripts/yeast_seq2.h5"
h5createFile(hdfile) # Create the output h5 file
fid <- H5Fopen(hdfile) # Filehandle for the h5 file
genes <- unique(gff$gene_id)
gene
gene <- genes[1]
tmp_nt <- nt_seq[[gene]]
tmp_cod <- cod_seq[[gene]]
# Create H5 groups for each gene
h5createGroup(fid,gene)
# Specify a dataset within the gene group to store the values and degree of compression
nt_dname <- paste(gene,"nt",sep="/")
cod_dname <- paste(gene,"codon",sep="/")
h5createDataset(fid,nt_dname,dims=c(1,length(tmp_nt)), storage.mode="character",size=2,level=7)
h5createDataset(fid,cod_dname,dims=c(1,length(tmp_cod)), storage.mode="character",size=4,level=7)
# Write the dataset within the gene group
h5write(as.matrix(t(tmp_nt)),fid,name=nt_dname,start=c(1,1))
h5write(as.matrix(t(tmp_cod)),fid,name=cod_dname,start=c(1,1))
h5read(fid,paste0(gene,"/codon"))
h5read(fid,paste0(gene,"/nt"))
for(gene in genes[2:length(genes)]){
# Get the output matrix of read counts by position and length for a gene
tmp_nt <- nt_seq[[gene]]
tmp_cod <- cod_seq[[gene]]
# Create H5 groups for each gene
h5createGroup(fid,gene)
# Specify a dataset within the gene group to store the values and degree of compression
nt_dname <- paste(gene,"nt",sep="/")
cod_dname <- paste(gene,"codon",sep="/")
h5createDataset(fid,nt_dname,dims=c(1,length(tmp_nt)), storage.mode="character",size=2,level=7)
h5createDataset(fid,cod_dname,dims=c(1,length(tmp_cod)), storage.mode="character",size=4,level=7)
# Write the dataset within the gene group
h5write(as.matrix(t(tmp_nt)),fid,name=nt_dname,start=c(1,1))
h5write(as.matrix(t(tmp_cod)),fid,name=cod_dname,start=c(1,1))
}
H5close()
which(start(new_gff)==1)
new_gff[2049]
